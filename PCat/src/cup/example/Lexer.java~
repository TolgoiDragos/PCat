/* The following code was generated by JFlex 1.3.5 on 22/10/2020, 12:13 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 22/10/2020, 12:13 from the specification file
 * <tt>file:/C:/Users/GabrielT/eclipse-workspace/PCat/lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\11\1\3\1\1\1\0\1\3\1\2\16\11\4\0\1\3\1\0"+
    "\1\7\1\0\1\10\3\0\1\4\1\6\1\5\1\45\1\51\1\46"+
    "\1\52\1\47\12\12\1\43\1\50\1\41\1\44\1\42\2\0\1\13"+
    "\1\20\1\35\1\15\1\21\1\30\1\22\1\37\1\23\2\10\1\26"+
    "\1\34\1\14\1\25\1\33\1\10\1\16\1\27\1\32\1\36\1\24"+
    "\1\40\1\31\1\17\1\10\1\53\1\0\1\54\1\0\1\10\1\0"+
    "\32\10\1\55\1\0\1\56\1\0\41\11\2\0\4\10\4\0\1\10"+
    "\2\0\1\11\7\0\1\10\4\0\1\10\5\0\27\10\1\0\37\10"+
    "\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10\1\0\1\10"+
    "\21\0\160\11\5\10\1\0\2\10\2\0\4\10\1\0\1\10\6\0"+
    "\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\123\10\1\0"+
    "\213\10\1\0\5\11\2\0\246\10\1\0\46\10\2\0\1\10\6\0"+
    "\51\10\6\0\1\10\1\0\55\11\1\0\1\11\1\0\2\11\1\0"+
    "\2\11\1\0\1\11\10\0\33\10\4\0\4\10\15\0\6\11\5\0"+
    "\1\10\4\0\13\11\1\0\1\11\3\0\53\10\37\11\4\0\2\10"+
    "\1\11\143\10\1\0\1\10\10\11\1\0\6\11\2\10\2\11\1\0"+
    "\4\11\2\10\12\11\3\10\2\0\1\10\17\0\1\11\1\10\1\11"+
    "\36\10\33\11\2\0\131\10\13\11\1\10\16\0\12\11\41\10\11\11"+
    "\2\10\4\0\1\10\2\0\1\11\30\10\4\11\1\10\11\11\1\10"+
    "\3\11\1\10\5\11\22\0\31\10\3\11\4\0\13\10\65\0\25\10"+
    "\1\0\10\10\25\0\61\11\66\10\3\11\1\10\22\11\1\10\7\11"+
    "\12\10\2\11\2\0\12\11\1\0\20\10\3\11\1\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0"+
    "\1\11\1\10\7\11\2\0\2\11\2\0\3\11\1\10\10\0\1\11"+
    "\4\0\2\10\1\0\3\10\2\11\2\0\12\11\4\10\7\0\2\10"+
    "\1\0\1\11\2\0\3\11\1\0\6\10\4\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10\2\0\1\11"+
    "\1\0\5\11\4\0\2\11\2\0\3\11\3\0\1\11\7\0\4\10"+
    "\1\0\1\10\7\0\14\11\3\10\1\11\13\0\3\11\1\0\11\10"+
    "\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\11\1\10\10\11\1\0\3\11\1\0\3\11\2\0\1\10"+
    "\17\0\2\10\2\11\2\0\12\11\1\0\1\10\7\0\1\10\6\11"+
    "\1\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10"+
    "\1\0\2\10\1\0\5\10\2\0\1\11\1\10\7\11\2\0\2\11"+
    "\2\0\3\11\10\0\2\11\4\0\2\10\1\0\3\10\2\11\2\0"+
    "\12\11\1\0\1\10\20\0\1\11\1\10\1\0\6\10\3\0\3\10"+
    "\1\0\4\10\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10"+
    "\3\0\3\10\3\0\14\10\4\0\5\11\3\0\3\11\1\0\4\11"+
    "\2\0\1\10\6\0\1\11\16\0\12\11\11\0\1\10\6\0\5\11"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\20\10\3\0\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\1\0\3\10\5\0\2\10"+
    "\2\11\2\0\12\11\20\0\1\10\3\11\1\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11"+
    "\1\0\3\11\1\0\4\11\7\0\2\11\7\0\1\10\1\0\2\10"+
    "\2\11\2\0\12\11\1\0\2\10\15\0\4\11\1\0\10\10\1\0"+
    "\3\10\1\0\51\10\2\11\1\10\7\11\1\0\3\11\1\0\4\11"+
    "\1\10\5\0\3\10\1\11\7\0\3\10\2\11\2\0\12\11\12\0"+
    "\6\10\2\0\2\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0"+
    "\1\10\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0"+
    "\10\11\6\0\12\11\2\0\2\11\15\0\60\10\1\11\2\10\7\11"+
    "\4\0\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10\1\0"+
    "\5\10\1\0\30\10\1\0\1\10\1\0\12\10\1\11\2\10\11\11"+
    "\1\10\2\0\5\10\1\0\1\10\1\0\6\11\2\0\12\11\2\0"+
    "\4\10\40\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0"+
    "\1\11\1\0\1\11\4\0\2\11\10\10\1\0\44\10\4\0\24\11"+
    "\1\0\2\11\5\10\13\11\1\0\44\11\11\0\1\11\71\0\53\10"+
    "\24\11\1\10\12\11\6\0\6\10\4\11\4\10\3\11\1\10\3\11"+
    "\2\10\7\11\3\10\4\11\15\10\14\11\1\10\17\11\2\0\46\10"+
    "\1\0\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10"+
    "\2\0\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10"+
    "\2\0\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11"+
    "\40\0\20\10\20\0\126\10\2\0\6\10\3\0\u026c\10\2\0\21\10"+
    "\1\0\32\10\5\0\113\10\3\0\13\10\7\0\15\10\1\0\4\10"+
    "\3\11\13\0\22\10\3\11\13\0\22\10\2\11\14\0\15\10\1\0"+
    "\3\10\1\0\2\11\14\0\64\10\40\11\3\0\1\10\3\0\2\10"+
    "\1\11\2\0\12\11\41\0\4\11\1\0\12\11\6\0\131\10\7\0"+
    "\5\10\2\11\42\10\1\11\1\10\5\0\106\10\12\0\37\10\1\0"+
    "\14\11\4\0\14\11\12\0\12\11\36\10\2\0\5\10\13\0\54\10"+
    "\4\0\32\10\6\0\12\11\46\0\27\10\5\11\4\0\65\10\12\11"+
    "\1\0\35\11\2\0\13\11\6\0\12\11\15\0\1\10\10\0\16\11"+
    "\102\0\5\11\57\10\21\11\7\10\4\0\12\11\21\0\11\11\14\0"+
    "\3\11\36\10\15\11\2\10\12\11\54\10\16\11\14\0\44\10\24\11"+
    "\10\0\12\11\3\0\3\10\12\11\44\10\2\0\11\10\7\0\53\10"+
    "\2\0\3\10\20\0\3\11\1\0\25\11\4\10\1\11\6\10\1\11"+
    "\2\10\3\11\1\10\5\0\300\10\72\11\1\0\5\11\u0116\10\2\0"+
    "\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0"+
    "\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0"+
    "\15\10\5\0\3\10\1\0\7\10\16\0\5\11\32\0\5\11\20\0"+
    "\2\10\23\0\1\10\13\0\5\11\1\0\12\11\1\0\1\10\15\0"+
    "\1\10\20\0\15\10\3\0\40\10\20\0\15\11\4\0\1\11\3\0"+
    "\14\11\21\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0"+
    "\13\10\2\0\4\10\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0"+
    "\57\10\1\0\57\10\1\0\205\10\6\0\4\10\3\11\2\10\14\0"+
    "\46\10\1\0\1\10\5\0\1\10\2\0\70\10\7\0\1\10\17\0"+
    "\1\11\27\10\11\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10"+
    "\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\40\11"+
    "\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11\1\0\5\10\2\0"+
    "\5\10\4\0\126\10\2\0\2\11\2\0\3\10\1\0\132\10\1\0"+
    "\4\10\5\0\53\10\1\0\136\10\21\0\33\10\65\0\20\10\u0200\0"+
    "\u19b6\10\112\0\u51f0\10\20\0\u048d\10\103\0\56\10\2\0\u010d\10\3\0"+
    "\20\10\12\11\2\10\24\0\57\10\1\11\4\0\12\11\1\0\37\10"+
    "\2\11\120\10\2\11\45\0\11\10\2\0\147\10\2\0\65\10\2\0"+
    "\5\10\60\0\13\10\1\11\3\10\1\11\4\10\1\11\27\10\5\11"+
    "\20\0\1\10\7\0\64\10\14\0\2\11\62\10\22\11\12\0\12\11"+
    "\6\0\22\11\6\10\3\0\1\10\1\0\2\10\13\11\34\10\10\11"+
    "\2\0\27\10\15\11\14\0\35\10\3\0\4\11\57\10\16\11\16\0"+
    "\1\10\12\11\6\0\5\10\1\11\12\10\12\11\5\10\1\0\51\10"+
    "\16\11\11\0\3\10\1\11\10\10\2\11\2\0\12\11\6\0\27\10"+
    "\3\0\1\10\3\11\62\10\1\11\1\10\3\11\2\10\2\11\5\10"+
    "\2\11\1\10\1\11\1\10\30\0\3\10\2\0\13\10\5\11\2\0"+
    "\3\10\2\11\12\0\6\10\2\0\6\10\2\0\6\10\11\0\7\10"+
    "\1\0\7\10\1\0\53\10\1\0\14\10\10\0\163\10\10\11\1\0"+
    "\2\11\2\0\12\11\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0"+
    "\u016e\10\2\0\152\10\46\0\7\10\14\0\5\10\5\0\1\10\1\11"+
    "\12\10\1\0\15\10\1\0\5\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0"+
    "\15\10\3\0\20\11\20\0\20\11\3\0\2\10\30\0\3\10\31\0"+
    "\1\10\6\0\5\10\1\0\207\10\2\0\1\11\4\0\1\10\13\0"+
    "\12\11\7\0\32\10\4\0\1\10\1\0\32\10\13\0\131\10\3\0"+
    "\6\10\2\0\6\10\2\0\6\10\2\0\3\10\3\0\2\10\3\0"+
    "\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    47,    94,   141,    47,    47,   188,   235,   282,   329, 
      376,   423,   470,   517,   564,   611,   658,   705,   752,   799, 
      846,   893,   940,   987,  1034,  1081,  1128,  1175,    47,    47, 
       47,    47,    47,    47,    47,  1222,    47,    47,    47,  1269, 
      188,  1316,  1363,  1410,  1457,   235,  1504,   235,  1551,  1598, 
     1645,  1692,  1739,   235,   235,  1786,   235,   235,  1833,  1880, 
     1927,  1974,   235,  2021,  2068,  2115,  2162,  2209,    47,    47, 
       47,    47,    47,    47,  2256,   235,  2303,   235,   235,  2350, 
     2397,  2444,  2491,   235,  2538,  2585,  2632,   235,  2679,  2726, 
      235,  2773,  2820,  2867,   235,  2914,  2961,  3008,  3055,   235, 
      235,  3102,  3149,  3196,   235,  3243,   235,  3290,   235,  3337, 
      235,   235,  3384,  3431,  3478,  3525,    47,  3572,   235,  3619, 
     3666,   235,   235,  3713,  3760,  3807,  3854,   235,   235,   235, 
      235,  3901,   235,  3948,  3995,   235,   235,  4042,  4089,   235
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\0\1\2\1\3\1\2\1\4\1\5\1\6\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\14\1\15\1\10"+
    "\1\16\1\17\1\10\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\10\1\26\1\27\1\30\3\10\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\60\0\1\2\62\0"+
    "\1\50\51\0\1\7\2\0\4\7\1\51\47\7\10\0"+
    "\31\10\30\0\1\11\54\0\4\10\1\52\1\10\1\53"+
    "\22\10\26\0\15\10\1\54\13\10\26\0\13\10\1\55"+
    "\1\10\1\56\13\10\26\0\11\10\1\57\17\10\26\0"+
    "\7\10\1\60\1\10\1\61\17\10\26\0\4\10\1\62"+
    "\11\10\1\63\2\10\1\64\7\10\26\0\4\10\1\65"+
    "\12\10\1\66\1\67\10\10\26\0\3\10\1\70\25\10"+
    "\26\0\6\10\1\71\11\10\1\72\10\10\26\0\15\10"+
    "\1\73\13\10\26\0\22\10\1\74\6\10\26\0\15\10"+
    "\1\75\13\10\26\0\7\10\1\76\5\10\1\77\11\10"+
    "\1\100\1\10\26\0\6\10\1\101\22\10\26\0\15\10"+
    "\1\102\13\10\26\0\6\10\1\103\20\10\1\104\1\10"+
    "\60\0\1\105\1\0\1\106\56\0\1\107\7\0\1\110"+
    "\46\0\1\111\53\0\1\112\15\0\1\50\2\0\2\50"+
    "\1\113\51\50\10\0\5\10\1\114\23\10\26\0\6\10"+
    "\1\115\22\10\26\0\22\10\1\116\6\10\26\0\14\10"+
    "\1\117\14\10\26\0\3\10\1\120\16\10\1\121\2\10"+
    "\1\122\3\10\26\0\12\10\1\123\16\10\26\0\5\10"+
    "\1\124\23\10\26\0\17\10\1\125\11\10\26\0\13\10"+
    "\1\126\15\10\26\0\22\10\1\127\6\10\26\0\6\10"+
    "\1\130\22\10\26\0\15\10\1\131\13\10\26\0\6\10"+
    "\1\132\22\10\26\0\6\10\1\133\22\10\26\0\23\10"+
    "\1\134\5\10\26\0\11\10\1\135\17\10\26\0\15\10"+
    "\1\136\13\10\26\0\5\10\1\137\23\10\26\0\13\10"+
    "\1\140\15\10\26\0\13\10\1\141\15\10\16\0\1\50"+
    "\2\0\2\50\1\113\1\142\50\50\10\0\3\10\1\143"+
    "\25\10\26\0\5\10\1\144\10\10\1\145\12\10\26\0"+
    "\26\10\1\146\2\10\26\0\15\10\1\147\13\10\26\0"+
    "\13\10\1\150\15\10\26\0\11\10\1\151\1\10\1\152"+
    "\15\10\26\0\22\10\1\153\6\10\26\0\11\10\1\154"+
    "\17\10\26\0\23\10\1\155\5\10\26\0\13\10\1\156"+
    "\15\10\26\0\11\10\1\157\17\10\26\0\4\10\1\160"+
    "\24\10\26\0\12\10\1\161\12\10\1\162\3\10\26\0"+
    "\22\10\1\163\6\10\26\0\16\10\1\164\12\10\16\0"+
    "\1\50\1\165\1\166\2\50\1\113\51\50\10\0\7\10"+
    "\1\167\21\10\26\0\6\10\1\170\22\10\26\0\6\10"+
    "\1\171\22\10\26\0\4\10\1\172\24\10\26\0\20\10"+
    "\1\173\10\10\26\0\12\10\1\174\16\10\26\0\4\10"+
    "\1\175\24\10\26\0\6\10\1\176\22\10\26\0\11\10"+
    "\1\177\17\10\26\0\11\10\1\200\17\10\26\0\11\10"+
    "\1\201\17\10\17\0\1\165\65\0\4\10\1\202\24\10"+
    "\26\0\5\10\1\203\23\10\26\0\11\10\1\204\17\10"+
    "\26\0\12\10\1\205\16\10\26\0\3\10\1\206\25\10"+
    "\26\0\5\10\1\207\23\10\26\0\6\10\1\210\22\10"+
    "\26\0\24\10\1\211\4\10\26\0\26\10\1\212\2\10"+
    "\26\0\6\10\1\213\22\10\26\0\11\10\1\214\17\10"+
    "\16\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  1,  9,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
}
  
private Symbol symbol(int sym, Object val) {
   return new Symbol(sym, yyline+1, yycolumn+1, val);
}

private void error(String message) {
   System.out.println("Error at line "+ (yyline+1) + ", column " + (yycolumn+ 1)+ " : "+message);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4136];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2268) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 68: 
          {  return symbol(INEQUALITY);  }
        case 141: break;
        case 72: 
          {  return symbol(ASSIGNMENT);  }
        case 142: break;
        case 136: 
          {  return symbol(PROGRAM);  }
        case 143: break;
        case 135: 
          {  return symbol(INTEGER);  }
        case 144: break;
        case 132: 
          {  return symbol(STRING);  }
        case 145: break;
        case 130: 
          {  return symbol(RECORD);  }
        case 146: break;
        case 129: 
          {  return symbol(RETURN);  }
        case 147: break;
        case 35: 
          {  return symbol(LSQBKT);  }
        case 148: break;
        case 31: 
          {  return symbol(DIVIDE);  }
        case 149: break;
        case 1: 
        case 2: 
          {  /* Ignore */  }
        case 150: break;
        case 3: 
          {  return symbol(LPAREN);  }
        case 151: break;
        case 5: 
          {  return symbol(RPAREN);  }
        case 152: break;
        case 26: 
          {  return symbol(GREATER);  }
        case 153: break;
        case 36: 
          {  return symbol(RSQBKT);  }
        case 154: break;
        case 37: 
          {  return symbol(LCBRKT);  }
        case 155: break;
        case 38: 
          {  return symbol(RCBRKT);  }
        case 156: break;
        case 69: 
          {  return symbol(LESSEQ);  }
        case 157: break;
        case 40: 
          {  System.out.println("STRING");  }
        case 158: break;
        case 94: 
          {  return symbol(MOD);  }
        case 159: break;
        case 90: 
          {  return symbol(FOR);  }
        case 160: break;
        case 87: 
          {  return symbol(VAR);  }
        case 161: break;
        case 83: 
          {  return symbol(END);  }
        case 162: break;
        case 78: 
          {  return symbol(DIV);  }
        case 163: break;
        case 77: 
          {  return symbol(NOT);  }
        case 164: break;
        case 34: 
          {  return symbol(DOT);  }
        case 165: break;
        case 30: 
          {  return symbol(SUB); }
        case 166: break;
        case 29: 
          {  return symbol(ADD);  }
        case 167: break;
        case 45: 
          {  return symbol(DO);  }
        case 168: break;
        case 47: 
          {  return symbol(BY);  }
        case 169: break;
        case 53: 
          {  return symbol(IS);  }
        case 170: break;
        case 54: 
          {  return symbol(IF);  }
        case 171: break;
        case 56: 
          {  return symbol(OR);  }
        case 172: break;
        case 57: 
          {  return symbol(OF);  }
        case 173: break;
        case 62: 
          {  return symbol(TO);  }
        case 174: break;
        case 75: 
          {  return symbol(AND);  }
        case 175: break;
        case 139: 
          {  return symbol(PROCEDURE);  }
        case 176: break;
        case 32: 
          {  return symbol(SEMICOLON);  }
        case 177: break;
        case 70: 
          {  return symbol(GREATEREQ);  }
        case 178: break;
        case 128: 
          {  return symbol(WHILE);  }
        case 179: break;
        case 127: 
          {  return symbol(WRITE);  }
        case 180: break;
        case 122: 
          {  return symbol(ELSIF);  }
        case 181: break;
        case 121: 
          {  return symbol(BEGIN);  }
        case 182: break;
        case 118: 
          {  return symbol(ARRAY);  }
        case 183: break;
        case 111: 
          {  return symbol(THEN);  }
        case 184: break;
        case 110: 
          {  return symbol(TYPE);  }
        case 185: break;
        case 108: 
          {  return symbol(LOOP);  }
        case 186: break;
        case 106: 
          {  return symbol(EXIT);  }
        case 187: break;
        case 104: 
          {  return symbol(ELSE);  }
        case 188: break;
        case 100: 
          {  return symbol(REAL);  }
        case 189: break;
        case 99: 
          {  return symbol(READ);  }
        case 190: break;
        case 33: 
          {  return symbol(COMMA);  }
        case 191: break;
        case 28: 
          {  return symbol(EQUAL);  }
        case 192: break;
        case 27: 
          {  return symbol(COLON);  }
        case 193: break;
        case 4: 
          {  return symbol(MULT);  }
        case 194: break;
        case 25: 
          {  return symbol(LESS);  }
        case 195: break;
        case 73: 
          {  return symbol(OPENINGBRKLESS);  }
        case 196: break;
        case 7: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 46: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 55: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 76: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 84: 
        case 85: 
        case 86: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 95: 
        case 96: 
        case 98: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 107: 
        case 109: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 119: 
        case 120: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 131: 
        case 133: 
        case 134: 
        case 137: 
        case 138: 
          {  return symbol(ID, yytext());  }
        case 197: break;
        case 8: 
          {  return symbol(NUMERIC_CONSTANT, new Integer(Integer.parseInt(yytext())));  }
        case 198: break;
        case 71: 
          {  return symbol(GREATERCLOSINGBRK);  }
        case 199: break;
        case 116: 
        case 117: 
          {  }
        case 200: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
